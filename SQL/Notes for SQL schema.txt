Not discussed:
+Please check the integrity actions, indeces and remarks at the end as we didn't discuss them...
+Some data types don't have not null specified which could be discussed they are:
PublicationYear.
Publisher Phone.
Publisher Address.
+Some data types are unique (again could be discussed) which are:
Note that an index is automatically added for unique attributes too:
Email.
Title.
+I added an index for author first name for the operation of searching the books written by a certain author (as was seen in the video).
-----------------------------------------------------------------------
Tables definitions:
BOOK: 
ISBN: type int unsigned not null primary key.
Title: type varchar(150) not null unique????
PublisherName: type varchar(45) not null /* foreign key to publisher */
PublicationYear: type year [takes a year from 1901 to 2150] can be null????
Price: type int not null unsigned.
Category: type varchar(10) not null [I combined it with the category table in an attribute here as category relation only has one attribute, also to limit only the choices in the pdf I think we should restrict the GUI input].
Threshold: type int not null unsigned.
Copies: type int not null
-----------------------------------------------------------------
BOOK_AUTHOR:
--This table is added beaucouse the book can have more than one author.
The primary key is the combination of the author name plus the book ISBN.
#The relation is many to many so we would have made a table for the relationship and another one for the author but having the fact that we only keep the authors name which is considered as the primary key in our database, we won't need to replicate the data in an additional table for the author.
ISBN: type int not null unsigned primary key. /*foreign key to book */.
Fname: type varchar(30) not null primary key.
Lname: type varchar(30) not null primary key.
-----------------------------------------------------------------
PUBLISHER:
--A single table till we make sure that telephone and address are 
single valued attributes.
PublisherName: type varchar(45) not null primary key.
Telephone: type varchar(15) can be null (if it is still not added in the DB).
Address: type varchar(150) can be null (if it is still not added in the DB).
-----------------------------------------------------------------
BOOK_ORDERS:
--Assumption: each book can have one order at most at a time, justification is that the number of book copies only decreases when books are sold, we add order if the number of book copies is less than a certain threshold and if so no further copies can be sold. Also, when order is processed it is deleted.
ISBN: type int unsigned not null primary key /* foreign key referencing the BOOK table */.
TotalOrdered: type int unsigned not null. 
-----------------------------------------------------------------
USER:
--We will keep a boolean to indicate whether he is a manager or not.
UserName: type varchar(45) not null primary key.
[Large size is to allow for encryption outputs(SHA256)].
PasswordHash: type varchar(64) not null.
Fname: type varchar(30) not null.
Lname: type varchar(30) not null.
Email: type varchar(45) not null unique.
Phone: type varchar(15) not null.
ShippingAddress: type varchar(150) not null.
IsManager: type boolean not null.[In script is written tinyint correspoding to storage of 0 or 1 but when inserting give a boolean data type as usual].
------------------------------------------------------------------------
PHYSICAL DESIGN:
INDECES: All primary keys are implicitly indexed, indeces added to Category(BTREE as a secondary index), title, fname of author(BTREE as a secondary index)(to be able to efficiently search which books where written by a certain author [as was seen in the video]).
-------------------------------------------------------------------------
Actions for integrity:
+Book-> publisher: on update cascade, on delete reject (should remove first the books having this publishername from our data base before removing the publisher).
+Author-> Book: on update cascade, on delete cascade (when removing the table we don't need to keep track of his authors).
+Orders->Book: on update cascade, on delete restrict (when removing a book we should first complete its pending orders by either just deleting the order or completing it first).
---------------------------------------------------------------------------
IMPORTANT REMARKS:
+We would need to keep track of the publisher data before adding a book referencing it, so when a book references a new publisher we can enter a new publisher tuple first having null in telephone and address or have a pop up for example for the manager to enter the publisher's data if it doesn't exist.
--------------------------------------------------------------------------- 


